// Health API —Ç–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç
const API_URL = "http://localhost:3000/api/health";

// –¢–µ—Å—Ç –¥–∞—Ç–∞ “Ø“Ø—Å–≥—ç—Ö
function generateTestData(userId) {
  return {
    userId: userId,
    heartRate: Math.floor(Math.random() * 40) + 60, // 60-100 bpm
    stepCount: Math.floor(Math.random() * 10000) + 1000, // 1000-11000 steps
    battery: Math.floor(Math.random() * 100) + 1, // 1-100%
    timestamp: new Date().toISOString(),
  };
}

// Health –¥–∞—Ç–∞ –∏–ª–≥—ç—ç—Ö
async function sendHealthData(userData) {
  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userData),
    });

    const result = await response.json();

    if (response.ok) {
      console.log(`‚úÖ User ${userData.userId} –¥–∞—Ç–∞ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç:`, {
        heartRate: userData.heartRate,
        stepCount: userData.stepCount,
        battery: userData.battery,
      });
    } else {
      console.error(`‚ùå User ${userData.userId} –∞–ª–¥–∞–∞:`, result.error);
    }

    return result;
  } catch (error) {
    console.error(`üö® ${userData.userId} —Ö–æ–ª–±–æ–ª—Ç –∞–ª–¥–∞–∞:`, error.message);
    return null;
  }
}

// –ë“Ø—Ö health –¥–∞—Ç–∞ –∞–≤–∞—Ö
async function getAllHealthData() {
  try {
    const response = await fetch(API_URL);
    const result = await response.json();

    if (response.ok) {
      console.log("\nüìä –û–¥–æ–æ–≥–∏–π–Ω health –¥–∞—Ç–∞:");
      console.log(`–ù–∏–π—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á: ${result.count}`);
      result.data.forEach((user) => {
        console.log(
          `  üë§ ${user.userId}: HR=${user.heartRate}bpm, Steps=${user.stepCount}, Battery=${user.battery}%`
        );
      });
      return result.data;
    } else {
      console.error("‚ùå –î–∞—Ç–∞ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", result.error);
      return null;
    }
  } catch (error) {
    console.error("üö® GET request –∞–ª–¥–∞–∞:", error.message);
    return null;
  }
}

// Stream —Ç–µ—Å—Ç
function testStream() {
  console.log("\nüîó Stream —Ö–æ–ª–±–æ–ª—Ç —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...");

  const eventSource = new EventSource(`${API_URL}?stream=true`);

  eventSource.onopen = () => {
    console.log("‚úÖ Stream –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ");
  };

  eventSource.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);

      if (data.type === "initial") {
        console.log(
          `üìã –≠—Ö–Ω–∏–π –¥–∞—Ç–∞ (${data.data.length} —Ö—ç—Ä—ç–≥–ª—ç–≥—á):`,
          data.data
        );
      } else if (data.type === "update") {
        console.log(`üîÑ –®–∏–Ω—ç update:`, data.data);
      }
    } catch (error) {
      console.error("‚ùå Stream –¥–∞—Ç–∞ parse –∞–ª–¥–∞–∞:", error);
    }
  };

  eventSource.onerror = (error) => {
    console.error("üö® Stream –∞–ª–¥–∞–∞:", error);
  };

  // 30 —Å–µ–∫—É–Ω–¥—ã–Ω –¥–∞—Ä–∞–∞ stream —Ö–∞–∞—Ö
  setTimeout(() => {
    eventSource.close();
    console.log("üîö Stream —Ö–∞–∞–≥–¥–ª–∞–∞");
  }, 30000);
}

// –û–ª–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥–∞—Ç–∞ —Ç–µ—Å—Ç
async function testMultipleUsers() {
  console.log("\nüß™ –û–ª–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–µ—Å—Ç —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...\n");

  const users = ["user001", "user002", "user003", "user004", "user005"];

  // –ë“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥–∞—Ç–∞ –∏–ª–≥—ç—ç—Ö
  for (const userId of users) {
    const testData = generateTestData(userId);
    await sendHealthData(testData);

    // –•–æ–æ—Ä–æ–Ω–¥ –±–∞–≥–∞ –∑—ç—Ä—ç–≥ —Ö“Ø–ª—ç—ç—Ö
    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  // –ë“Ø—Ö –¥–∞—Ç–∞ —Ö–∞—Ä–∞—Ö
  setTimeout(async () => {
    await getAllHealthData();
  }, 1000);
}

// “Æ–Ω–¥—Å—ç–Ω —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü
async function runTests() {
  console.log("üè• Health API –¢–µ—Å—Ç —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...\n");

  try {
    // 1. Server —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
    console.log("1Ô∏è‚É£ Server –∞–º—å–¥ —ç—Å—ç—Ö —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...");
    const healthCheck = await getAllHealthData();

    if (healthCheck === null) {
      console.error(
        "‚ùå Server —Ö–æ–ª–±–æ–≥–¥–æ—Ö–≥“Ø–π –±–∞–π–Ω–∞. npm run dev –∞–∂–∏–ª–ª—É—É–ª—Å–∞–Ω —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É."
      );
      return;
    }

    console.log("‚úÖ Server –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ!\n");

    // 2. –û–ª–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–µ—Å—Ç
    await testMultipleUsers();

    // 3. Stream —Ç–µ—Å—Ç (browser –æ—Ä—á–∏–Ω–¥ –ª –∞–∂–∏–ª–ª–∞–Ω–∞)
    if (typeof window !== "undefined") {
      testStream();
    } else {
      console.log("‚ÑπÔ∏è Stream —Ç–µ—Å—Ç –∑”©–≤—Ö”©–Ω browser –¥—ç—ç—Ä –∞–∂–∏–ª–ª–∞–Ω–∞");
    }

    console.log(
      "\n‚ú® –ë“Ø—Ö —Ç–µ—Å—Ç –¥—É—É—Å–ª–∞–∞! Health dashboard http://localhost:3000/health –¥—ç—ç—Ä –æ—Ä–æ–æ–¥ “Ø–∑—ç—ç—Ä—ç–π."
    );
  } catch (error) {
    console.error("üö® –¢–µ—Å—Ç –∞–ª–¥–∞–∞:", error);
  }
}

// –¢–µ—Å—Ç –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
runTests();
